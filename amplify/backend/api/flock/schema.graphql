# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
type User @model @auth(rules: [
      { allow: private, operations: [read, create, update] }  
      { allow: groups, groups: ["asktheflockadmin"], operations: [ read, create, update, delete] },
      { allow: owner, operations: [ read, update, delete]}        
      ]) 
  {
  id: ID! @primaryKey 
  locale: String!
  email: AWSEmail! @index(name: "byEmail", queryField: "userByEmail")
  name: String
  userTag: String @index(name: "byUserTag", sortKeyFields: ["id"])
  birthdate: AWSDate
  gender: String
  address: String
  votes: AWSJSON
  owner: String @auth(rules: [{ allow: owner, operations: [read, update, delete] },   { allow: groups, groups: ["asktheflockadmin"], operations: [ read, create, update, delete] }]) 
  #prevent owners to reassign the owner of their existing record to another user.
}

type Question @model            
             @auth(rules: [                    
                   { allow: private, operations: [read, update, delete] }, 
                   { allow: owner, operations: [ read, create, update, delete]},                 
                   { allow: groups, groups: ["asktheflockadmin"], operations: [ read, create, update, delete] }
                  ])
              {
  id: ID!  @primaryKey 
  text: String! 
  userID: ID! @index(name:"byUserId", queryField: "questionByUserId") 
  userName: String 
  voteEndAt: AWSDateTime 
  sentiment: String 
  parentID: ID 
  questionTag: String 
  options: AWSJSON! 
  stats: AWSJSON 
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] },   { allow: private, operations: [read, update, delete] }]) 
 }

type Comment @model
            @auth( rules: [ 
               { allow: owner , operations: [ read, create, update, delete]},
               { allow: groups, groups: ["asktheflockadmin"], operations: [ read, create, update, delete] },
               { allow: private, operations: [read ,create, update] }])           
   {
     id: ID! @primaryKey
     questionID: ID!  @index(name:"byQuestionId", queryField: "commentByQuestionId") 
     userID: ID   
     optionID: Int!
     optionText: String
     comment: AWSJSON!
     owner: String @auth(rules: [{ allow: owner, operations: [read, update] },  { allow: private, operations: [read ,create] }]) 
}

type Vote @model            
             @auth(rules: [                    
                   { allow: private, operations: [read, create] },                   
                  ])
              {
  id: ID!  @primaryKey 
  userID: ID! @index(name:"byUserId", queryField: "voteByUserId") 
  userName: String
  questionID: ID! @index(name:"byQuestionId", queryField: "voteByQuestionId") 
  optionID: Int!
 }

